var documenterSearchIndex = {"docs":
[{"location":"quickguide/#Quick-Start-Guide-1","page":"Quick Start Guide","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickguide/#","page":"Quick Start Guide","title":"Quick Start Guide","text":"Once PowerModelsDSSE is installed, together with its dependencies, install Ipopt and SCS. These are needed to solve non-convex and convex problems, respectively. To run a simulation, a network data file (e.g. \"case3_unbalanced.dss\" in the package folder under /test/data/opendss) needs to be acquired, together with its relative measurement file (e.g. \"case3_input.csv\" in the package folder under /test/data/). Network and measurement data will be merged and a SE example can be run as follow:","category":"page"},{"location":"quickguide/#","page":"Quick Start Guide","title":"Quick Start Guide","text":"using PowerModelsDSSE, PowerModelsDistribution\nusing Ipopt\n\n_PMD = PowerModelsDistribution\n\ndata = parse_file(\"test/data/opendss/case3_unbalanced.dss\")\npmd_data = _PMD.transform_data_model(data)\nmeas_file = \"test/data/case3_input.csv\"\nadd_measurement_to_pmd_data!(pmd_data, meas_file; actual_meas=false, seed=0)\nadd_measurement_id_to_load!(pmd_data, meas_file)\npmd_data[\"setting\"] = Dict{String,Any}(\"estimation_criterion\" => \"wls\",\n                                        \"rescale_weight\" => 1)\n\nse_result = run_ivr_mc_se(pmd_data, optimizer_with_attributes(Ipopt.Optimizer, \"tol\"=>1e-6, \"print_level\"=>0))","category":"page"},{"location":"quickguide/#","page":"Quick Start Guide","title":"Quick Start Guide","text":"The run commands return detailed results data in the form of a dictionary, following PowerModelsDistribution format, and can be saved for further processing, as above.","category":"page"},{"location":"quickguide/#Accessing-Different-Formulations-1","page":"Quick Start Guide","title":"Accessing Different Formulations","text":"","category":"section"},{"location":"quickguide/#","page":"Quick Start Guide","title":"Quick Start Guide","text":"To different formulations correspond different run functions. The function \"runacpmcse\" uses the AC Polar form, \"runacrmcse\" uses the AC rectangular, etc.","category":"page"},{"location":"measurements_and_conversions/#","page":"-","title":"-","text":"This section reports the allowed measured quantities, together with the expressions that convert them to a different variable space, if they are not native to the space of the formulation they are associated to.","category":"page"},{"location":"measurements_and_conversions/#","page":"-","title":"-","text":"Table I: summary of allowed measured variables and conversions","category":"page"},{"location":"measurements_and_conversions/#","page":"-","title":"-","text":"| | vm | va | cmx | cax | crx | cix | px | qx | vr | vi | |––-|––|––|––-|––-|––-|––-|––|––|––|––| | ACP | N  | N  | SF  | X  | F   | F   | N  | N  | X  | X  | | ACR | SF | PP | SF  | X  | MF  | MF  | N  | N  | N  | N  | | IVR | SF | PP | SF  | PP  | N   | N   | M  | M  | N  | N  |","category":"page"},{"location":"measurements_and_conversions/#","page":"-","title":"-","text":"Where: <br /> N: no conversion needed (the variable is part of the formulation's space) <br /> X: not provided <br /> PP: conversion of type PreProcessing <br /> SF: conversion of type SquareFraction <br /> M: conversion of type Multiplication <br /> F: conversion of type Fraction <br /> MF: conversion of type MultiplicationFraction","category":"page"},{"location":"measurements_and_conversions/#","page":"-","title":"-","text":"The x in cmx, cax, etc.. indicates that the conversion is valid for all the following component type: branch, gen and load, for which they would be written as cm, cmg (gen), cmd (load), ca, cag, cad, etc.","category":"page"},{"location":"measurements_and_conversions/#","page":"-","title":"-","text":"Although they have been available, it is not advisable that the user relies on the AT conversions, as the optimizer might fail to identify the correct quadrant.","category":"page"},{"location":"measurements_and_conversions/#","page":"-","title":"-","text":"A guess is made in the conversion type definition, to assign the measure to the most likely quadrant. However, this might change from system to system or if a system is rather unbalanced. This can lead to convergence issues or large errors on the estimation.","category":"page"},{"location":"measurements_and_conversions/#","page":"-","title":"-","text":"In table 2 below, a description of the actual conversion formula is provided.","category":"page"},{"location":"measurements_and_conversions/#","page":"-","title":"-","text":"| | vm | va | cmx | cax | crx | cix | px | qx | vr | vi | |––-|––|––|––-|––-|––-|––-|––|––|––|––| | ACP | N  | N  | cmx<sup>2</sup> = (px<sup>2</sup>+qx<sup>2</sup>)/vm<sup>2</sup>  | X  | crx = (px*cos(va)+qx*sin(va))/vm   | cix = (-qx *cos(va)+px*sin(va))/vm   | N  | N  | X  | X  | | ACR | vm<sup>2</sup> = (vi<sup>2</sup>+vr<sup>2</sup>)/1 | tan(va) = vi/vr | cmx<sup>2</sup> = (px<sup>2</sup>+qx<sup>2</sup>)/vm<sup>2</sup>  | X  | crx = (px*vr+qx*vi)/(vr<sup>2</sup>+vi<sup>2</sup>)  | cix = (px*vi-qx*vr)/(vr<sup>2</sup>+vi<sup>2</sup>)  | N  | N  | N  | N  | | IVR | vm<sup>2</sup> = (vi<sup>2</sup>+vr<sup>2</sup>)/1 | tan(va) = vi/vr | cmx<sup>2</sup> = (cix<sup>2</sup>+crx<sup>2</sup>)/1  | tan(cax) = cix/crx  | N   | N   | px = vr*crx+vi*cix  | qx = vi*crx-vr*cix  | N  | N  |","category":"page"},{"location":"formulation/#","page":"-","title":"-","text":"variable_mc_residual\nconstraint_mc_residual\nobjective_mc_se","category":"page"},{"location":"formulation/#PowerModelsDSSE.variable_mc_residual","page":"-","title":"PowerModelsDSSE.variable_mc_residual","text":"variable_mc_residual\n\n\n\n\n\n","category":"function"},{"location":"formulation/#PowerModelsDSSE.objective_mc_se","page":"-","title":"PowerModelsDSSE.objective_mc_se","text":"objective_mc_se\n\n\n\n\n\n","category":"function"},{"location":"#PowerModelsDSSE.jl-1","page":"Home","title":"PowerModelsDSSE.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: Dev) (Image: Build Status) (Image: Build Status) (Image: Codecov)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"PowerModelsDSSE.jl is an extention package of PowerModelsDistribution.jl for Static Distribution System State Estimation.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"A Distribution System State Estimator determines the most-likely state of distribution system given a set of uncertainties, e.g., measurement errors, pseudo-measurements, etc. These uncertainties may pertain to any quantity of any network component, e.g., :vm of a :bus, :pd of a :load, etc.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Currently, uncertainties may either be described by:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"a deterministic value Float64, or\na continuous univariate distribution ContinuousUnivariateDistribution:\na normal distribution, modeled through either WLS or LAV approach, or\na non-normal distribution, modeled through -logpdf.","category":"page"},{"location":"#Core-Problem-Specification-1","page":"Home","title":"Core Problem Specification","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"State Estimation (SE) as equality constrained optimization problem","category":"page"},{"location":"#Core-Network-Constraint-Formulations-1","page":"Home","title":"Core Network Constraint Formulations","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"AC Polar (exact)\nAC Rectangular (exact)\nAC IV Rectangular (exact)\nSDP (positive semi-definite relaxation)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"All the formulations are three-phase unbalanced and feature accurate delta/wye load models. The exact formulations also feature delta/wye transformer models. Network constraint, load and transformer models are taken from PowerModelsDistribution.jl","category":"page"},{"location":"#Network-Data-Formats-1","page":"Home","title":"Network Data Formats","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"OpenDSS \".dss\" files in the PowerModelsDistribution format\nCSV \".csv\" file with measurement a statistical information for state estimation","category":"page"},{"location":"#Summary-of-State-Estimation-Possibilities-1","page":"Home","title":"Summary of State Estimation Possibilities","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"- ACP ACR IVR SDP\nBI/BF BI BI BF BF\nSimple SE[1] Available Available Available Available\nAdvanced SE[2] Available Available Available Unavailable\n4-wire[3] v0.2.0 v0.2.0 v0.2.0 v0.2.0","category":"page"},{"location":"#","page":"Home","title":"Home","text":"[1]: The simple SE does not include transformer models and delta/wye loads.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"[2]: The advanced SE includes transformer models and delta/wye loads.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"[3]: Awaiting PowerModelsDistribution v0.10.0","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The latest stable release of PowerModelsDSSE can be installed using the Julia package manager:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"] add https://github.com/timmyfaraday/PowerModelsDSSE.jl.git","category":"page"},{"location":"#","page":"Home","title":"Home","text":"In order to test whether the package works, run:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"] test MultiStateSystems","category":"page"},{"location":"#Acknowledgements-1","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This code has been developed at KU Leuven (University of Leuven). The primary developers are Tom Van Acker (@timmyfaraday) and Marta Vanin (@MartaVanin) with support for the following contributors:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Frederik Geth (@frederikgeth), CSIRO, General PowerModelsDistribution.jl Advice.\nSander Claeys (@sanderclaeys), KU Leuven, General PowerModelsDistribution.jl Advice.","category":"page"},{"location":"#License-1","page":"Home","title":"License","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This code is provided under a BSD license.","category":"page"},{"location":"#Notes-1","page":"Home","title":"Notes","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Currently, bad data detection techniques and observability considerations are out of scope.","category":"page"}]
}
