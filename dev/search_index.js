var documenterSearchIndex = {"docs":
[{"location":"quickguide/#Quick-Start-Guide-1","page":"Quick Start Guide","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickguide/#","page":"Quick Start Guide","title":"Quick Start Guide","text":"Once PowerModelsDSSE is installed, together with its dependencies, install Ipopt and SCS. These are needed to solve non-convex and convex problems, respectively. To run a simulation, a network data file (e.g. \"case3_unbalanced.dss\" in the package folder under /test/data/opendss) needs to be acquired, together with its relative measurement file (e.g. \"case3_input.csv\" in the package folder under /test/data/). Network and measurement data will be merged and a SE example can be run as follow:","category":"page"},{"location":"quickguide/#","page":"Quick Start Guide","title":"Quick Start Guide","text":"using PowerModelsDSSE, PowerModelsDistribution\nusing Ipopt\n\n_PMD = PowerModelsDistribution\n\ndata = parse_file(\"test/data/opendss/case3_unbalanced.dss\")\npmd_data = _PMD.transform_data_model(data)\nmeas_file = \"test/data/case3_input.csv\"\nadd_measurement_to_pmd_data!(pmd_data, meas_file; actual_meas=false, seed=0)\nadd_measurement_id_to_load!(pmd_data, meas_file)\npmd_data[\"setting\"] = Dict{String,Any}(\"estimation_criterion\" => \"wls\",\n                                        \"rescale_weight\" => 1)\n\nse_result = run_ivr_mc_se(pmd_data, optimizer_with_attributes(Ipopt.Optimizer, \"tol\"=>1e-6, \"print_level\"=>0))","category":"page"},{"location":"quickguide/#","page":"Quick Start Guide","title":"Quick Start Guide","text":"The run commands return detailed results data in the form of a dictionary, following PowerModelsDistribution format, and can be saved for further processing, as above.","category":"page"},{"location":"quickguide/#Accessing-Different-Formulations-1","page":"Quick Start Guide","title":"Accessing Different Formulations","text":"","category":"section"},{"location":"quickguide/#","page":"Quick Start Guide","title":"Quick Start Guide","text":"To different formulations correspond different run functions. The function \"runacpmcse\" uses the AC Polar form, \"runacrmcse\" uses the AC rectangular, etc.","category":"page"},{"location":"quick_start_guide/#Quick-Start-Guide-1","page":"Getting Started","title":"Quick Start Guide","text":"","category":"section"},{"location":"quick_start_guide/#Introduction-1","page":"Getting Started","title":"Introduction","text":"","category":"section"},{"location":"quick_start_guide/#","page":"Getting Started","title":"Getting Started","text":"Once Ipopt, PowerModelsDSSE and PowerModelsDistribution are installed, and a network data file (e.g. \"case3_unbalanced.dss\" in the package folder under ./test/data/extra/network) has been acquired as well as a measurement data file (e.g. \"case3_unbalanced.csv\" in the package folder under ./test/data/extra/measurement), an unbalanced AC Static State Estimation can be executed with,","category":"page"},{"location":"quick_start_guide/#","page":"Getting Started","title":"Getting Started","text":"using Ipopt\nusing PowerModelsDSSE\nusing PowerModelsDistribution\n\nrun_mc_se(\"case3_unbalanced.dss\", \"case3_unbalanced.csv\", with_optimizer(Ipopt.Optimizer))","category":"page"},{"location":"quick_start_guide/#Network-Data-Input-1","page":"Getting Started","title":"Network Data Input","text":"","category":"section"},{"location":"quick_start_guide/#Parsing-OpenDSS-files-1","page":"Getting Started","title":"Parsing OpenDSS files","text":"","category":"section"},{"location":"quick_start_guide/#","page":"Getting Started","title":"Getting Started","text":"To parse an OpenDSS file into PowerModelsDistribution's default ENGINEERING format, use the parse_file command:","category":"page"},{"location":"quick_start_guide/#","page":"Getting Started","title":"Getting Started","text":"eng = parse_file(\"case3_unbalanced.dss\")","category":"page"},{"location":"quick_start_guide/#","page":"Getting Started","title":"Getting Started","text":"To get the MATHEMATICAL model it is possible to transform the data model using the transform_data_model command.","category":"page"},{"location":"quick_start_guide/#","page":"Getting Started","title":"Getting Started","text":"math = transform_data_model(eng)","category":"page"},{"location":"quick_start_guide/#Parsing-ENWL-files-1","page":"Getting Started","title":"Parsing ENWL files","text":"","category":"section"},{"location":"quick_start_guide/#","page":"Getting Started","title":"Getting Started","text":"To parse a specific feeder fdr of a network ntw of the ENWL data use:","category":"page"},{"location":"quick_start_guide/#","page":"Getting Started","title":"Getting Started","text":"data = parse_file(get_enwl_dss_path(ntw,fdr))","category":"page"},{"location":"quick_start_guide/#","page":"Getting Started","title":"Getting Started","text":"Parsing ENWL data requires the addition of a load profile before it can be used. This may be accomplished using","category":"page"},{"location":"quick_start_guide/#","page":"Getting Started","title":"Getting Started","text":"PowerModelsDSSE.insert_profiles!(data, season, devices, pfs; t=missing, useactual=true)","category":"page"},{"location":"quick_start_guide/#PowerModelsDSSE.insert_profiles!-NTuple{4,Any}","page":"Getting Started","title":"PowerModelsDSSE.insert_profiles!","text":"insert_profiles!(data, season, devices, pfs; t=missing, useactual=true)\n\nThis function adds the load profiles to the parsed ENWL ENGINEERING data data.\n\nArguments\n\nseason: \"summer\", \"winter\"\ndevices: \"load\", \"pv\", \"ehp\", \"uchp\"\npfs: power factor of the devices\nt: time-step\n\nExample\n\njulia> data = parse_file(get_enwl_dss_path(10, 1))\njulia> insert_profiles!(data, \"summer\", [\"load\", \"pv\"], [0.95, 0.90], t = 144)\n\n\n\n\n\n","category":"method"},{"location":"quick_start_guide/#","page":"Getting Started","title":"Getting Started","text":"Additionally, some functions are include specifically for the ENWL data to simplify the data in order to improve tractability.","category":"page"},{"location":"quick_start_guide/#","page":"Getting Started","title":"Getting Started","text":"PowerModelsDSSE.rm_enwl_transformer!(data_eng)","category":"page"},{"location":"quick_start_guide/#PowerModelsDSSE.rm_enwl_transformer!-Tuple{Any}","page":"Getting Started","title":"PowerModelsDSSE.rm_enwl_transformer!","text":"rm_enwl_transformer!(data_eng)\n\nThis function removes the transformer from a parsed ENWL ENGINEERING data file.\n\n\n\n\n\n","category":"method"},{"location":"quick_start_guide/#","page":"Getting Started","title":"Getting Started","text":"PowerModelsDSSE.reduce_enwl_lines_eng!(data_eng)","category":"page"},{"location":"quick_start_guide/#PowerModelsDSSE.reduce_enwl_lines_eng!-Tuple{Any}","page":"Getting Started","title":"PowerModelsDSSE.reduce_enwl_lines_eng!","text":"reduce_enwl_lines_eng!(data_eng)\n\nThis function removes all trailing lines from a parsed ENWL ENGINEERING data file.\n\n\n\n\n\n","category":"method"},{"location":"quick_start_guide/#","page":"Getting Started","title":"Getting Started","text":"PowerModelsDSSE.reduce_enwl_lines_math!(data_math)","category":"page"},{"location":"quick_start_guide/#PowerModelsDSSE.reduce_enwl_lines_math!-Tuple{Any}","page":"Getting Started","title":"PowerModelsDSSE.reduce_enwl_lines_math!","text":"reduce_enwl_lines_math!(data_math)\n\nThis function removes all trailing lines from a parsed ENWL MATHEMATICAL data file.\n\n\n\n\n\n","category":"method"},{"location":"quick_start_guide/#Measurement-Data-Input-1","page":"Getting Started","title":"Measurement Data Input","text":"","category":"section"},{"location":"quick_start_guide/#","page":"Getting Started","title":"Getting Started","text":"Adding the measurements to a MATHEMATICAL data dictionary may be accomplished through:","category":"page"},{"location":"quick_start_guide/#","page":"Getting Started","title":"Getting Started","text":"PowerModelsDSSE.add_measurements!(data::Dict, meas_file::String; actual_meas = false)","category":"page"},{"location":"quick_start_guide/#PowerModelsDSSE.add_measurements!-Tuple{Dict,String}","page":"Getting Started","title":"PowerModelsDSSE.add_measurements!","text":"add_measurements!(data::Dict, meas_file::String; actual_meas::Bool = false, seed::Int=0)\n\nAdd measurement data from separate CSV file to the PowerModelsDistribution data dictionary.\n\nArguments\n\ndata: data dictionary in a format usable with PowerModelsDistribution\nmeas_file: path to and name of file with measurement data\nactual_meas: default is false.\nfalse: the \"val\" in meas_file are not actual measurements, e.g.,   error-free powerflow results. In this case, a fake measurement is built,   extracting a value from the given distribution.\ntrue: the \"val\" column in meas_file are actual measurement values,   i.e., with an error. No other processing is required.\nseed: random seed value to make the results reproducible. It is an argument   and not a fixed value inside the function to allow, e.g., the exploration of   different MonteCarlo scenarios\n\n\n\n\n\n","category":"method"},{"location":"quick_start_guide/#","page":"Getting Started","title":"Getting Started","text":"Furthermore, functionality is included to write a measurement file, i.e., a csv-file based on powerflow results, using:","category":"page"},{"location":"quick_start_guide/#","page":"Getting Started","title":"Getting Started","text":"PowerModelsDSSE.write_measurements!(model::Type, data::Dict, pf_results::Dict, path::String)","category":"page"},{"location":"quick_start_guide/#PowerModelsDSSE.write_measurements!-Tuple{Type,Dict,Dict,String}","page":"Getting Started","title":"PowerModelsDSSE.write_measurements!","text":"write_measurements!(model::Type, data::Dict, pf_results::Dict, path::String)\n\nFunction to write a measurement file, i.e., a csv-file, to a specific path based on the power flow.\n\n\n\n\n\n","category":"method"},{"location":"#PowerModelsDSSE.jl-1","page":"Home","title":"PowerModelsDSSE.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: Dev) (Image: Build Status) (Image: Build Status) (Image: Codecov)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"PowerModelsDSSE.jl is an extention package of PowerModelsDistribution.jl for Static Distribution System State Estimation.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"A Distribution System State Estimator determines the most-likely state of distribution system given a set of uncertainties, e.g., measurement errors, pseudo-measurements, etc. These uncertainties may pertain to any quantity of any network component, e.g., :vm of a :bus, :pd of a :load, etc.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Currently, uncertainties may either be described by:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"a deterministic value Float64, or\na continuous univariate distribution ContinuousUnivariateDistribution:\na normal distribution, modeled through either WLS or LAV approach, or\na non-normal distribution, modeled through -logpdf.","category":"page"},{"location":"#Core-Problem-Specification-1","page":"Home","title":"Core Problem Specification","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"State Estimation (SE) as equality constrained optimization problem","category":"page"},{"location":"#Core-Network-Constraint-Formulations-1","page":"Home","title":"Core Network Constraint Formulations","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"AC Polar (exact)\nAC Rectangular (exact)\nAC IV Rectangular (exact)\nSDP (positive semi-definite relaxation)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"All the formulations are three-phase unbalanced and feature accurate delta/wye load models. The exact formulations also feature delta/wye transformer models. Network constraint, load and transformer models are taken from PowerModelsDistribution.jl","category":"page"},{"location":"#Network-Data-Formats-1","page":"Home","title":"Network Data Formats","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"OpenDSS \".dss\" files in the PowerModelsDistribution format\nCSV \".csv\" file with measurement a statistical information for state estimation","category":"page"},{"location":"#Summary-of-State-Estimation-Possibilities-1","page":"Home","title":"Summary of State Estimation Possibilities","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"- ACP ACR IVR SDP\nBI/BF BI BI BF BF\nSimple SE[1] Available Available Available Available\nAdvanced SE[2] Available Available Available Unavailable\n4-wire[3] v0.2.0 v0.2.0 v0.2.0 v0.2.0","category":"page"},{"location":"#","page":"Home","title":"Home","text":"[1]: The simple SE does not include transformer models and delta/wye loads.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"[2]: The advanced SE includes transformer models and delta/wye loads.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"[3]: Awaiting PowerModelsDistribution v0.10.0","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The latest stable release of PowerModelsDSSE can be installed using the Julia package manager:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"] add https://github.com/timmyfaraday/PowerModelsDSSE.jl.git","category":"page"},{"location":"#","page":"Home","title":"Home","text":"In order to test whether the package works, run:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"] test MultiStateSystems","category":"page"},{"location":"#Acknowledgements-1","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This code has been developed at KU Leuven (University of Leuven). The primary developers are Tom Van Acker (@timmyfaraday) and Marta Vanin (@MartaVanin) with support for the following contributors:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Frederik Geth (@frederikgeth), CSIRO, General PowerModelsDistribution.jl Advice.\nSander Claeys (@sanderclaeys), KU Leuven, General PowerModelsDistribution.jl Advice.","category":"page"},{"location":"#License-1","page":"Home","title":"License","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This code is provided under a BSD license.","category":"page"},{"location":"#Notes-1","page":"Home","title":"Notes","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Currently, bad data detection techniques and observability considerations are out of scope.","category":"page"},{"location":"measurements/#Measurement-Conversion-1","page":"Measurement Conversion","title":"Measurement Conversion","text":"","category":"section"},{"location":"measurements/#Introduction-1","page":"Measurement Conversion","title":"Introduction","text":"","category":"section"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"Any network formulation has a specific variable space, e.g., ACP includes vm, va, px and qx[1].","category":"page"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"[1]: The x in px, qx, cmx, cax, crx and cix   indicates that these variables exists for branches (~), generators (g) and   loads (-). In order to capture the variable for a specific element it   should be rewritten, e.g., \"px\" respectively becomes \"p\", \"pg\" and   \"pd\".","category":"page"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"- vm va cmx cax crx cix px qx vr vi\nACP N N SF X F F N N X X\nACR SF PP SF X MF MF N N N N\nIVR SF PP SF PP N N M M N N","category":"page"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"where:","category":"page"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"F:  conversion of type Fraction\nM:  conversion of type Multiplication\nMF: conversion of type MultiplicationFraction\nN:  native to the network formulation\nPP: conversion of type PreProcessing\nSF: conversion of type SquareFraction\nX:  not provided","category":"page"},{"location":"measurements/#Conversion-1","page":"Measurement Conversion","title":"Conversion","text":"","category":"section"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"Certain measurement variables may not be natively supported in the formulation space. Consequently, it becomes necessary to convert them into that specific space. This is accomplished through the inclusion of an additional constraint(s). The different types of conversion constraints are enumerated in what follows.","category":"page"},{"location":"measurements/#PreProcessing-1","page":"Measurement Conversion","title":"PreProcessing","text":"","category":"section"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"The conversion type PreProcessing  allows to include va measurements in the ACR and IVR formulation, and cax measurements in the IVR formulation, respectively through:","category":"page"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"begineqnarray\n      tan(textva)   = fractextvitextvr              \n      tan(textcax)  = fractextcixtextcrx\nendeqnarray","category":"page"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"These are non-linear equality constraints, modeled using @NLconstraint.","category":"page"},{"location":"measurements/#Fraction-1","page":"Measurement Conversion","title":"Fraction","text":"","category":"section"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"The conversion type Fraction allows to include crx and cix measurements in the ACP formulation, respectively through:","category":"page"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"begineqnarray\n      textcrx = fractextpxcdotcos(textva)+textqxcdotsin(textva)textvm \n      textcix = fractextpxcdotsin(textva)-textqxcdotcos(textva)textvm\nendeqnarray","category":"page"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"These are non-linear equality constraints, modeled using @NLconstraint.","category":"page"},{"location":"measurements/#Multiplication-1","page":"Measurement Conversion","title":"Multiplication","text":"","category":"section"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"The conversion type Multiplication allows to include px and qx measurements in the IVR formulation, respectively through:","category":"page"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"begineqnarray\n      textpx = textvicdottextcrx + textvicdottextcix \n      textqx = textvicdottextcrx - textvicdottextcix\nendeqnarray","category":"page"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"These are quadratic equality constraints, modeled using @constraint.","category":"page"},{"location":"measurements/#MultiplicationFraction-1","page":"Measurement Conversion","title":"MultiplicationFraction","text":"","category":"section"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"The conversion type MultiplicationFraction allows to include crx and cix measurements in the ACR formulation, respectively through:","category":"page"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"begineqnarray\n      textpx = fractextpxcdottextvr+textqxcdottextvitextvr^2+textvi^2 \n      textpx = fractextpxcdottextvi-textqxcdottextvrtextvr^2+textvi^2 \nendeqnarray","category":"page"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"These are non-linear equality constraints, modeled using @NLconstraint.","category":"page"},{"location":"measurements/#SquareFraction-1","page":"Measurement Conversion","title":"SquareFraction","text":"","category":"section"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"The conversion type SquareFraction allows to include vm measurements in the ACR and IVR formulation, and cmx measurements in the ACP, ACR and IVR formulation, respectively through:","category":"page"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"begineqnarray\n      textvm^2     = fractextvi^2 + textvr^21                  \n      textcmx^2    = fractextpx^2 + textqx^2textvm^2      \n      textcmx^2    = fractextcix^2 + textcrx^21\nendeqnarray","category":"page"},{"location":"measurements/#","page":"Measurement Conversion","title":"Measurement Conversion","text":"These are non-linear equality constraints, modeled using @NLconstraint.","category":"page"}]
}
